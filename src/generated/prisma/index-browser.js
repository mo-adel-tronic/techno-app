
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

import { Decimal, objectEnumValues, makeStrictEnum, Public, getRuntime } from './runtime/index-browser.js';


const Prisma = {}

const _Prisma = Prisma;
export { _Prisma as Prisma };
export const $Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

_Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

_Prisma.ClassroomsScalarFieldEnum = {
  id: 'id',
  duration_plans: 'duration_plans',
  subject_id: 'subject_id',
  teacher_id: 'teacher_id'
};

_Prisma.Degree_planScalarFieldEnum = {
  id: 'id',
  theoretical: 'theoretical',
  practical: 'practical',
  activity: 'activity'
};

_Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  depart_code: 'depart_code'
};

_Prisma.Duration_plansScalarFieldEnum = {
  id: 'id',
  edu_year: 'edu_year',
  term: 'term',
  semester: 'semester'
};

_Prisma.Exam_planScalarFieldEnum = {
  id: 'id',
  theoretical: 'theoretical',
  practical: 'practical'
};

_Prisma.Hour_planScalarFieldEnum = {
  id: 'id',
  theoretical: 'theoretical',
  practical: 'practical',
  credit: 'credit'
};

_Prisma.Learning_programsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  subject_hours: 'subject_hours',
  paper_hours: 'paper_hours',
  program_code: 'program_code',
  depart_id: 'depart_id',
  advisor: 'advisor',
  advisor_assistant: 'advisor_assistant'
};

_Prisma.Program_requirementsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  credit_hour: 'credit_hour',
  type: 'type',
  require_code: 'require_code',
  program_id: 'program_id'
};

_Prisma.ResultsScalarFieldEnum = {
  id: 'id',
  student_id: 'student_id',
  classroom_id: 'classroom_id',
  st_status: 'st_status'
};

_Prisma.SpecializationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  depart_id: 'depart_id'
};

_Prisma.StudentsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  registered_at: 'registered_at',
  student_code: 'student_code',
  national_n: 'national_n',
  phone: 'phone',
  nation_phone: 'nation_phone',
  advisor: 'advisor',
  specialization_id: 'specialization_id'
};

_Prisma.SubjectsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  subject_code: 'subject_code',
  hours_id: 'hours_id',
  exams_id: 'exams_id',
  degrees_id: 'degrees_id',
  require_id: 'require_id'
};

_Prisma.TeachersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  degree: 'degree'
};

_Prisma.Teachers_jobsScalarFieldEnum = {
  id: 'id',
  jobs: 'jobs',
  teacher_id: 'teacher_id',
  depart_id: 'depart_id'
};

_Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

_Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

_Prisma.departmentOrderByRelevanceFieldEnum = {
  name: 'name',
  depart_code: 'depart_code'
};

_Prisma.learning_programsOrderByRelevanceFieldEnum = {
  name: 'name',
  program_code: 'program_code'
};

_Prisma.program_requirementsOrderByRelevanceFieldEnum = {
  name: 'name',
  require_code: 'require_code'
};

_Prisma.specializationOrderByRelevanceFieldEnum = {
  name: 'name'
};

_Prisma.studentsOrderByRelevanceFieldEnum = {
  name: 'name',
  student_code: 'student_code',
  national_n: 'national_n',
  phone: 'phone',
  nation_phone: 'nation_phone'
};

_Prisma.subjectsOrderByRelevanceFieldEnum = {
  name: 'name',
  subject_code: 'subject_code'
};

_Prisma.teachersOrderByRelevanceFieldEnum = {
  name: 'name'
};

_Prisma.teachers_jobsOrderByRelevanceFieldEnum = {
  jobs: 'jobs'
};
export const duration_plans_term = $Enums.duration_plans_term = {
  Spring: 'Spring',
  Fall: 'Fall',
  Summer: 'Summer'
};

export const program_requirements_type = $Enums.program_requirements_type = {
  Optional: 'Optional',
  Mandatory: 'Mandatory'
};

export const results_st_status = $Enums.results_st_status = {
  Passed: 'Passed',
  Failed: 'Failed'
};

export const teachers_degree = $Enums.teachers_degree = {
  ProfessorDoctor: 'ProfessorDoctor',
  AssociateProfessorDoctor: 'AssociateProfessorDoctor',
  Doctor: 'Doctor',
  AssistantLecturer: 'AssistantLecturer',
  Lecturer: 'Lecturer'
};

_Prisma.ModelName = {
  classrooms: 'classrooms',
  degree_plan: 'degree_plan',
  department: 'department',
  duration_plans: 'duration_plans',
  exam_plan: 'exam_plan',
  hour_plan: 'hour_plan',
  learning_programs: 'learning_programs',
  program_requirements: 'program_requirements',
  results: 'results',
  specialization: 'specialization',
  students: 'students',
  subjects: 'subjects',
  teachers: 'teachers',
  teachers_jobs: 'teachers_jobs'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get() {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

const _PrismaClient = PrismaClient;
export { _PrismaClient as PrismaClient };

Object.assign(exports, Prisma)
