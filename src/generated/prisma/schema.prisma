generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model classrooms {
  id                                                       Int            @id @default(autoincrement()) @db.UnsignedInt
  duration_plans                                           Int            @db.UnsignedInt
  subject_id                                               Int            @db.UnsignedInt
  teacher_id                                               Int?           @db.UnsignedInt
  duration_plans_classrooms_duration_plansToduration_plans duration_plans @relation("classrooms_duration_plansToduration_plans", fields: [duration_plans], references: [id], onDelete: Cascade, map: "classrooms_ibfk_1")
  subjects                                                 subjects       @relation(fields: [subject_id], references: [id], onDelete: Cascade, map: "classrooms_ibfk_2")
  teachers                                                 teachers?      @relation(fields: [teacher_id], references: [id], map: "classrooms_ibfk_3")
  results                                                  results[]

  @@index([duration_plans], map: "duration_plans")
  @@index([subject_id], map: "subject_id")
  @@index([teacher_id], map: "teacher_id")
}

model degree_plan {
  id          Int        @id @default(autoincrement()) @db.UnsignedInt
  theoretical Int        @db.UnsignedSmallInt
  practical   Int        @db.UnsignedSmallInt
  activity    Int        @db.UnsignedSmallInt
  subjects    subjects[]
}

model department {
  id                Int                 @id @default(autoincrement()) @db.UnsignedInt
  name              String              @db.VarChar(90)
  depart_code       String              @db.Char(5)
  learning_programs learning_programs[]
  specialization    specialization[]
  teachers_jobs     teachers_jobs[]
}

model duration_plans {
  id                                                   Int                 @id @default(autoincrement()) @db.UnsignedInt
  edu_year                                             Int                 @db.Year
  term                                                 duration_plans_term
  semester                                             Int                 @default(1) @db.UnsignedTinyInt
  classrooms_classrooms_duration_plansToduration_plans classrooms[]        @relation("classrooms_duration_plansToduration_plans")
}

model exam_plan {
  id          Int        @id @default(autoincrement()) @db.UnsignedInt
  theoretical Int        @db.UnsignedSmallInt
  practical   Int        @db.UnsignedSmallInt
  subjects    subjects[]
}

model hour_plan {
  id          Int        @id @default(autoincrement()) @db.UnsignedInt
  theoretical Int        @default(0) @db.UnsignedTinyInt
  practical   Int        @default(0) @db.UnsignedTinyInt
  credit      Int        @default(0) @db.UnsignedTinyInt
  subjects    subjects[]
}

model learning_programs {
  id                                                     Int                    @id @default(autoincrement()) @db.UnsignedInt
  name                                                   String                 @db.VarChar(90)
  subject_hours                                          Int                    @default(0) @db.UnsignedTinyInt
  paper_hours                                            Int                    @default(0) @db.UnsignedTinyInt
  program_code                                           String                 @db.Char(10)
  depart_id                                              Int                    @db.UnsignedInt
  advisor                                                Int?                   @db.UnsignedInt
  advisor_assistant                                      Int?                   @db.UnsignedInt
  department                                             department             @relation(fields: [depart_id], references: [id], onDelete: Cascade, map: "learning_programs_ibfk_1")
  teachers_learning_programs_advisorToteachers           teachers?              @relation("learning_programs_advisorToteachers", fields: [advisor], references: [id], map: "learning_programs_ibfk_2")
  teachers_learning_programs_advisor_assistantToteachers teachers?              @relation("learning_programs_advisor_assistantToteachers", fields: [advisor_assistant], references: [id], map: "learning_programs_ibfk_3")
  program_requirements                                   program_requirements[]

  @@index([advisor], map: "advisor")
  @@index([advisor_assistant], map: "advisor_assistant")
  @@index([depart_id], map: "depart_id")
}

model program_requirements {
  id                Int                       @id @default(autoincrement()) @db.UnsignedInt
  name              String                    @db.VarChar(90)
  credit_hour       Int                       @default(0) @db.UnsignedTinyInt
  type              program_requirements_type
  require_code      String                    @db.Char(2)
  program_id        Int                       @db.UnsignedInt
  learning_programs learning_programs         @relation(fields: [program_id], references: [id], onDelete: Cascade, map: "program_requirements_ibfk_1")
  subjects          subjects[]

  @@index([program_id], map: "program_id")
}

model results {
  id           Int               @id @default(autoincrement()) @db.UnsignedInt
  student_id   Int               @db.UnsignedInt
  classroom_id Int               @db.UnsignedInt
  st_status    results_st_status
  students     students          @relation(fields: [student_id], references: [id], onDelete: Cascade, map: "results_ibfk_1")
  classrooms   classrooms        @relation(fields: [classroom_id], references: [id], onDelete: Cascade, map: "results_ibfk_2")

  @@index([classroom_id], map: "classroom_id")
  @@index([student_id], map: "student_id")
}

model specialization {
  id         Int        @id @default(autoincrement()) @db.UnsignedInt
  name       String     @db.VarChar(90)
  depart_id  Int        @db.UnsignedInt
  department department @relation(fields: [depart_id], references: [id], onDelete: Cascade, map: "specialization_ibfk_1")
  students   students[]

  @@index([depart_id], map: "depart_id")
}

model students {
  id                Int            @id @default(autoincrement()) @db.UnsignedInt
  name              String         @db.VarChar(90)
  registered_at     DateTime?      @db.Date
  student_code      String         @unique(map: "student_code") @db.VarChar(20)
  national_n        String?        @db.VarChar(14)
  phone             String?        @db.Char(11)
  nation_phone      String?        @db.VarChar(40)
  advisor           Int?           @db.UnsignedInt
  specialization_id Int            @db.UnsignedInt
  results           results[]
  teachers          teachers?      @relation(fields: [advisor], references: [id], map: "students_ibfk_1")
  specialization    specialization @relation(fields: [specialization_id], references: [id], onDelete: Cascade, map: "students_ibfk_2")

  @@index([advisor], map: "advisor")
  @@index([specialization_id], map: "specialization_id")
}

model subjects {
  id                   Int                   @id @default(autoincrement()) @db.UnsignedInt
  name                 String                @db.VarChar(255)
  subject_code         String                @db.Char(2)
  hours_id             Int?                  @db.UnsignedInt
  exams_id             Int?                  @db.UnsignedInt
  degrees_id           Int?                  @db.UnsignedInt
  require_id           Int?                  @db.UnsignedInt
  classrooms           classrooms[]
  hour_plan            hour_plan?            @relation(fields: [hours_id], references: [id], map: "subjects_ibfk_1")
  exam_plan            exam_plan?            @relation(fields: [exams_id], references: [id], map: "subjects_ibfk_2")
  degree_plan          degree_plan?          @relation(fields: [degrees_id], references: [id], map: "subjects_ibfk_3")
  program_requirements program_requirements? @relation(fields: [require_id], references: [id], map: "subjects_ibfk_4")

  @@index([degrees_id], map: "degrees_id")
  @@index([exams_id], map: "exams_id")
  @@index([hours_id], map: "hours_id")
  @@index([require_id], map: "require_id")
}

model teachers {
  id                                                              Int                 @id @db.UnsignedInt
  name                                                            String              @db.VarChar(90)
  degree                                                          teachers_degree
  classrooms                                                      classrooms[]
  learning_programs_learning_programs_advisorToteachers           learning_programs[] @relation("learning_programs_advisorToteachers")
  learning_programs_learning_programs_advisor_assistantToteachers learning_programs[] @relation("learning_programs_advisor_assistantToteachers")
  students                                                        students[]
  teachers_jobs                                                   teachers_jobs[]
}

model teachers_jobs {
  id         Int        @id @default(autoincrement()) @db.UnsignedInt
  jobs       String
  teacher_id Int        @db.UnsignedInt
  depart_id  Int        @db.UnsignedInt
  teachers   teachers   @relation(fields: [teacher_id], references: [id], onDelete: Cascade, map: "teachers_jobs_ibfk_1")
  department department @relation(fields: [depart_id], references: [id], onDelete: Cascade, map: "teachers_jobs_ibfk_2")

  @@index([depart_id], map: "depart_id")
  @@index([teacher_id], map: "teacher_id")
}

enum duration_plans_term {
  Spring @map("ربيعي")
  Fall   @map("خريفي")
  Summer @map("صيفي")
}

enum teachers_degree {
  ProfessorDoctor          @map("أ.د")
  AssociateProfessorDoctor @map("أ.م.د")
  Doctor                   @map("د")
  AssistantLecturer        @map("م.م")
  Lecturer                 @map("م")
}

enum program_requirements_type {
  Optional  @map("اختياري")
  Mandatory @map("إجباري")
}

enum results_st_status {
  Passed @map("اجتاز")
  Failed @map("اخفق")
}
